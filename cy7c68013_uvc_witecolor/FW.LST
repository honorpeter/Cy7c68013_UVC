C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE FW
OBJECT MODULE PLACED IN FW.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FW.C OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          
   3          //-----------------------------------------------------------------------------
   4          // File:      fw.c
   5          // Contents:  Firmware frameworks task dispatcher and device request parser
   6          //            source.
   7          //
   8          // indent 3.  NO TABS!
   9          //
  10          // $Revision: 17 $
  11          // $Date: 11/15/01 5:45p $
  12          //
  13          // Copyright (c) 2002 Cypress Semiconductor, Inc. All rights reserved
  14          //-----------------------------------------------------------------------------
  15          #include "fx2.h"
  16          #include "fx2regs.h"
  17          
  18          //-----------------------------------------------------------------------------
  19          // Constants
  20          //-----------------------------------------------------------------------------
  21          #define DELAY_COUNT   0x9248*8L  // Delay for 8 sec at 24Mhz, 4 sec at 48
  22          #define _IFREQ  24000            // IFCLK constant for Synchronization Delay
  23          #define _CFREQ  48000            // CLKOUT constant for Synchronization Delay
  24          
  25          //-----------------------------------------------------------------------------
  26          // Random Macros
  27          //-----------------------------------------------------------------------------
  28          #define   min(a,b) (((a)<(b))?(a):(b))
  29          #define   max(a,b) (((a)>(b))?(a):(b))
  30          
  31            // Registers which require a synchronization delay, see section 15.14
  32            // FIFORESET        FIFOPINPOLAR
  33            // INPKTEND         OUTPKTEND
  34            // EPxBCH:L         REVCTL
  35            // GPIFTCB3         GPIFTCB2
  36            // GPIFTCB1         GPIFTCB0
  37            // EPxFIFOPFH:L     EPxAUTOINLENH:L
  38            // EPxFIFOCFG       EPxGPIFFLGSEL
  39            // PINFLAGSxx       EPxFIFOIRQ
  40            // EPxFIFOIE        GPIFIRQ
  41            // GPIFIE           GPIFADRH:L
  42            // UDMACRCH:L       EPxGPIFTRIG
  43            // GPIFTRIG
  44            
  45            // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  46            //      ...these have been replaced by GPIFTC[B3:B0] registers
  47            
  48          #include "fx2sdly.h"             // Define _IFREQ and _CFREQ above this #include
  49          
  50          //-----------------------------------------------------------------------------
  51          // Global Variables
  52          //-----------------------------------------------------------------------------
  53          volatile BOOL   GotSUD;
  54          BOOL      Rwuen;
  55          BOOL      Selfpwr;
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 2   

  56          volatile BOOL   Sleep;                  // Sleep mode enable flag
  57          
  58          WORD   pDeviceDscr;   // Pointer to Device Descriptor; Descriptors may be moved
  59          WORD   pDeviceQualDscr;
  60          WORD   pHighSpeedConfigDscr;
  61          WORD   pFullSpeedConfigDscr;   
  62          WORD   pConfigDscr;
  63          WORD   pOtherConfigDscr;   
  64          WORD   pStringDscr;   
  65          
  66          //-----------------------------------------------------------------------------
  67          // Prototypes
  68          //-----------------------------------------------------------------------------
  69          void SetupCommand(void);
  70          void TD_Init(void);
  71          void TD_Poll(void);
  72          BOOL TD_Suspend(void);
  73          BOOL TD_Resume(void);
  74          
  75          BOOL DR_GetDescriptor(void);
  76          BOOL DR_SetConfiguration(void);
  77          BOOL DR_GetConfiguration(void);
  78          BOOL DR_SetInterface(void);
  79          BOOL DR_GetInterface(void);
  80          BOOL DR_GetStatus(void);
  81          BOOL DR_ClearFeature(void);
  82          BOOL DR_SetFeature(void);
  83          BOOL DR_VendorCmnd(void);
  84          
  85          // this table is used by the epcs macro 
  86          const char code  EPCS_Offset_Lookup_Table[] =
  87          {
  88             0,    // EP1OUT
  89             1,    // EP1IN
  90             2,    // EP2OUT
  91             2,    // EP2IN
  92             3,    // EP4OUT
  93             3,    // EP4IN
  94             4,    // EP6OUT
  95             4,    // EP6IN
  96             5,    // EP8OUT
  97             5,    // EP8IN
  98          };
  99          
 100          // macro for generating the address of an endpoint's control and status register (EPnCS)
 101          #define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
 102          
 103          //-----------------------------------------------------------------------------
 104          // Code
 105          //-----------------------------------------------------------------------------
 106          
 107          // Task dispatcher
 108          void main(void)
 109          {
 110   1         DWORD   i;
 111   1         WORD   offset;
 112   1         DWORD   DevDescrLen;
 113   1         DWORD   j=0;
 114   1         WORD   IntDescrAddr;
 115   1         WORD   ExtDescrAddr;
 116   1         DWORD   tCount=0;
 117   1         // Initialize Global States
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 3   

 118   1         Sleep = FALSE;               // Disable sleep mode
 119   1         Rwuen = FALSE;               // Disable remote wakeup
 120   1         Selfpwr = FALSE;            // Disable self powered
 121   1         GotSUD = FALSE;               // Clear "Got setup data" flag
 122   1      
 123   1      
 124   1              
 125   1         // Initialize user device
 126   1          TD_Init();
 127   1         
 128   1      
 129   1         // The following section of code is used to relocate the descriptor table. 
 130   1         // Since the SUDPTRH and SUDPTRL are assigned the address of the descriptor 
 131   1         // table, the descriptor table must be located in on-part memory.
 132   1         // The 4K demo tools locate all code sections in external memory.
 133   1         // The descriptor table is relocated by the frameworks ONLY if it is found 
 134   1         // to be located in external memory.
 135   1         pDeviceDscr = (WORD)&DeviceDscr;
 136   1         pDeviceQualDscr = (WORD)&DeviceQualDscr;
 137   1         pHighSpeedConfigDscr = (WORD)&HighSpeedConfigDscr;
 138   1         pFullSpeedConfigDscr = (WORD)&FullSpeedConfigDscr;
 139   1         pStringDscr = (WORD)&StringDscr;
 140   1      
 141   1         if (EZUSB_HIGHSPEED())
 142   1         {
 143   2            pConfigDscr = pHighSpeedConfigDscr;
 144   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 145   2         }
 146   1         else
 147   1         {
 148   2            pConfigDscr = pFullSpeedConfigDscr;
 149   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 150   2         }
 151   1      
 152   1         if ((WORD)&DeviceDscr & 0xe000)
 153   1         {
 154   2            IntDescrAddr = INTERNAL_DSCR_ADDR;
 155   2            ExtDescrAddr = (WORD)&DeviceDscr;
 156   2            DevDescrLen = (WORD)&UserDscr - (WORD)&DeviceDscr + 2;
 157   2            for (i = 0; i < DevDescrLen; i++)
 158   2               *((BYTE xdata *)IntDescrAddr+i) = 0xCD;
 159   2            for (i = 0; i < DevDescrLen; i++)
 160   2               *((BYTE xdata *)IntDescrAddr+i) = *((BYTE xdata *)ExtDescrAddr+i);
 161   2            pDeviceDscr = IntDescrAddr;
 162   2            offset = (WORD)&DeviceDscr - INTERNAL_DSCR_ADDR;
 163   2            pDeviceQualDscr -= offset;
 164   2            pConfigDscr -= offset;
 165   2            pOtherConfigDscr -= offset;
 166   2            pHighSpeedConfigDscr -= offset;
 167   2            pFullSpeedConfigDscr -= offset;
 168   2            pStringDscr -= offset;
 169   2         }
 170   1      
 171   1         EZUSB_IRQ_ENABLE();            // Enable USB interrupt (INT2)
 172   1         EZUSB_ENABLE_RSMIRQ();            // Wake-up interrupt
 173   1      
 174   1         INTSETUP |= (bmAV2EN | bmAV4EN);     // Enable INT 2 & 4 autovectoring
 175   1      
 176   1         USBIE |= bmSUDAV | bmSUTOK | bmSUSP | bmURES | bmHSGRANT;   // Enable selected interrupts
 177   1         EA = 1;                  // Enable 8051 interrupts
 178   1      
 179   1      #ifndef NO_RENUM
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 4   

 180   1         // Renumerate if necessary.  Do this by checking the renum bit.  If it
 181   1         // is already set, there is no need to renumerate.  The renum bit will
 182   1         // already be set if this firmware was loaded from an eeprom.
 183   1         if(!(USBCS & bmRENUM))
 184   1         {
 185   2             EZUSB_Discon(TRUE);   // renumerate
 186   2         }
 187   1      #endif
 188   1      
 189   1         // unconditionally re-connect.  If we loaded from eeprom we are
 190   1         // disconnected and need to connect.  If we just renumerated this
 191   1         // is not necessary but doesn't hurt anything
 192   1         USBCS &=~bmDISCON;
 193   1      
 194   1         CKCON = (CKCON&(~bmSTRETCH)) | FW_STRETCH_VALUE; // Set stretch to 0 (after renumeration)
 195   1      
 196   1         // clear the Sleep flag.
 197   1         Sleep = FALSE;
 198   1      
 199   1      
 200   1      
 201   1         // Task Dispatcher
 202   1         while(TRUE)               // Main Loop
 203   1         {
 204   2            if(GotSUD)            // Wait for SUDAV
 205   2            {
 206   3               SetupCommand();          // Implement setup command
 207   3                 GotSUD = FALSE;            // Clear SUDAV flag
 208   3            }
 209   2      
 210   2            // Poll User Device
 211   2            // NOTE: Idle mode stops the processor clock.  There are only two
 212   2            // ways out of idle mode, the WAKEUP pin, and detection of the USB
 213   2            // resume state on the USB bus.  The timers will stop and the
 214   2            // processor will not wake up on any other interrupts.
 215   2            if (Sleep)
 216   2                {
 217   3                if(TD_Suspend())
 218   3                    { 
 219   4                    Sleep = FALSE;            // Clear the "go to sleep" flag.  Do it here to prevent any race c
             -ondition between wakeup and the next sleep.
 220   4                    do
 221   4                        {
 222   5                          EZUSB_Susp();         // Place processor in idle mode.
 223   5                        }
 224   4                      while(!Rwuen && EZUSB_EXTWAKEUP());
 225   4                      // Must continue to go back into suspend if the host has disabled remote wakeup
 226   4                      // *and* the wakeup was caused by the external wakeup pin.
 227   4                      
 228   4                   // 8051 activity will resume here due to USB bus or Wakeup# pin activity.
 229   4                   EZUSB_Resume();   // If source is the Wakeup# pin, signal the host to Resume.      
 230   4                   TD_Resume();
 231   4                    }   
 232   3                }
 233   2      
 234   2              
 235   2              
 236   2              TD_Poll();
 237   2      
 238   2         }
 239   1      }
 240          
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 5   

 241          
 242          /******************** Added by mddd       ****************/
 243          BYTE bRequest,bmReqType; 
 244          WORD wValue, wIndex, wLength;
 245          
 246          #define CY_USB_TYPE_MASK               (0x60)
 247          #define CY_USB_TARGET_MASK             (0x03)
 248          #define CY_USB_STANDARD_RQT            (0X00)
 249          #define CY_USB_CLASS_RQT               (0x20)
 250          #define CY_USB_TARGET_INTF             (0x01)
 251          #define CY_UVC_CTRL_INTERFACE          (0x00)
 252          #define CY_UVC_STREAM_INTERFACE            (0x01)
 253          
 254          typedef unsigned char uint8_t ;
 255          
 256          #define CX3_UVC_VS_PROBE_CONTROL                (0x0100)           /* Video Stream Probe Control Request *
             -/
 257          #define CX3_UVC_VS_COMMIT_CONTROL               (0x0200)           /* Video Stream Commit Control Request 
             -*/
 258          #define CX3_UVC_VC_REQUEST_ERROR_CODE_CONTROL   (0x0200)           /* Request Control Error Code*/
 259          #define CX3_UVC_ERROR_INVALID_CONTROL           (0x06)             /* Error indicating invalid control req
             -uested*/
 260          #define CX3_UVC_STREAM_INTERFACE                (0x01)             /* Streaming Interface : Alternate sett
             -ing 1 */
 261          
 262          
 263          #define CX3_USB_UVC_SET_REQ_TYPE                (uint8_t)(0x21)    /* UVC interface SET request type */
 264          #define CX3_USB_UVC_GET_REQ_TYPE                (uint8_t)(0xA1)    /* UVC Interface GET request type */
 265          #define CX3_USB_UVC_GET_CUR_REQ                 (uint8_t)(0x81)    /* UVC GET_CUR request */
 266          #define CX3_USB_UVC_SET_CUR_REQ                 (uint8_t)(0x01)    /* UVC SET_CUR request */
 267          #define CX3_USB_UVC_GET_MIN_REQ                 (uint8_t)(0x82)    /* UVC GET_MIN Request */
 268          #define CX3_USB_UVC_GET_MAX_REQ                 (uint8_t)(0x83)    /* UVC GET_MAX Request */
 269          #define CX3_USB_UVC_GET_RES_REQ                 (uint8_t)(0x84)    /* UVC GET_RES Request */
 270          #define CX3_USB_UVC_GET_LEN_REQ                 (uint8_t)(0x85)    /* UVC GET_LEN Request */
 271          #define CX3_USB_UVC_GET_INFO_REQ                (uint8_t)(0x86)    /* UVC GET_INFO Request */
 272          #define CX3_USB_UVC_GET_DEF_REQ                 (uint8_t)(0x87)    /* UVC GET_DEF Request */
 273          
 274          xdata BYTE glProbeCtrl[34]={
 275                          0x00, 0x00,                         /* bmHint : No fixed parameters */
 276                          0x01,                                                   /* Corresponding Video format index */
 277                          0x01                                    ,           /* Corresponding Video frame index */
 278                          0x15, 0x16, 0x05, 0x00,             /* Frame interval (in 100ns units): (1/30)x10^7  */
 279                          0x00, 0x00,                         /* Key frame rate in key frame/video frame units */
 280                          0x00, 0x00,                         /* PFrame rate in PFrame / key frame units */
 281                          0x00, 0x00,                         /* Compression quality control */
 282                          0x00, 0x00,                         /* Window size for average bit rate */
 283                          0x00, 0x00,                         /* Internal video streaming i/f latency in ms */
 284                          0x00, 0x60, 0x09, 0x00,             /* Maximum video or still frame size in bytes: 640 x 480 x 2 */
 285                          0x8C, 0x07, 0x00, 0x00,             /* No. of bytes device can rx in single payload-1932 */
 286                          0x00, 0x60, 0xE3, 0x16,             /* Device Clock */
 287                          0x00,                               /* Framing Information - Ignored for uncompressed format */
 288                          0x00,                               /* Preferred payload format version */
 289                          0x00,                               /* Minimum payload format version */
 290                          0x00,                               /* Maximum payload format version */
 291          
 292          };
 293          /**************************************************/
 294          
 295          void HandleVideoStreamRqts()
 296          {
 297   1      
 298   1            if ((wValue == CX3_UVC_VS_PROBE_CONTROL) || (wValue == CX3_UVC_VS_COMMIT_CONTROL))
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 6   

 299   1            {
 300   2              switch (bRequest)
 301   2              {
 302   3              case CX3_USB_UVC_GET_INFO_REQ:
 303   3                {
 304   4                                    EP0BUF[0] = 3;
 305   4                        EP0BCH = 0;
 306   4                        EP0BCL = 1;
 307   4                }
 308   3                break;
 309   3      
 310   3              case CX3_USB_UVC_GET_LEN_REQ:
 311   3                {
 312   4                                    EP0BUF[0] = 34;
 313   4                        EP0BCH = 0;
 314   4                        EP0BCL = 1;
 315   4                }
 316   3                break;
 317   3      
 318   3              case CX3_USB_UVC_GET_CUR_REQ:
 319   3              case CX3_USB_UVC_GET_MIN_REQ:
 320   3              case CX3_USB_UVC_GET_MAX_REQ:
 321   3              case CX3_USB_UVC_GET_DEF_REQ:
 322   3                {
 323   4                        SUDPTRH = MSB(&glProbeCtrl[0]);
 324   4                        SUDPTRL = LSB(&glProbeCtrl[0]);
 325   4                }
 326   3                break;
 327   3      
 328   3              case CX3_USB_UVC_SET_CUR_REQ:
 329   3                {
 330   4                              EP0BCH = 0;
 331   4                              EP0BCL = 0; // Clear bytecount to allow new data in; also stops NAKing
 332   4      
 333   4                }
 334   3                break;
 335   3      
 336   3              default:
 337   3      
 338   3                break;
 339   3              }
 340   2            }
 341   1      
 342   1      
 343   1      }
 344          /********************************************************************************/
 345          
 346          
 347          // Device request parser
 348          void SetupCommand(void)
 349          {
 350   1         void   *dscr_ptr;
 351   1      
 352   1      /******************** Added by mddd       ****************/                   
 353   1         BYTE bType, bTarget;
 354   1      
 355   1         bmReqType = SETUPDAT[0];
 356   1         bType = (bmReqType & CY_USB_TYPE_MASK);              
 357   1         bTarget = (bmReqType & CY_USB_TARGET_MASK);    
 358   1         bRequest = SETUPDAT[1];
 359   1         wValue = (SETUPDAT[3] << 8) | SETUPDAT[2];
 360   1         wIndex = (SETUPDAT[5] << 8) | SETUPDAT[4];
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 7   

 361   1         wLength = (SETUPDAT[7] << 8) | SETUPDAT[6];
 362   1      
 363   1         if (bType == CY_USB_CLASS_RQT)
 364   1         {
 365   2            if (bTarget == CY_USB_TARGET_INTF)
 366   2            {
 367   3              switch(SETUPDAT[4])
 368   3              {
 369   4                  case CY_UVC_STREAM_INTERFACE:
 370   4                      HandleVideoStreamRqts();
 371   4                  break;
 372   4      
 373   4                  case CY_UVC_CTRL_INTERFACE:
 374   4                  break;
 375   4              }
 376   3            }
 377   2      
 378   2         }
 379   1      /*************************************************/
 380   1      
 381   1      
 382   1        if(bType == CY_USB_STANDARD_RQT)
 383   1        {
 384   2         switch(SETUPDAT[1])
 385   2         {
 386   3            case SC_GET_DESCRIPTOR:                  // *** Get Descriptor
 387   3               if(DR_GetDescriptor())
 388   3                  switch(SETUPDAT[3])         
 389   3                  {
 390   4                     case GD_DEVICE:            // Device
 391   4                        SUDPTRH = MSB(pDeviceDscr);
 392   4                        SUDPTRL = LSB(pDeviceDscr);
 393   4                        break;
 394   4                     case GD_DEVICE_QUALIFIER:            // Device Qualifier
 395   4                        SUDPTRH = MSB(pDeviceQualDscr);
 396   4                        SUDPTRL = LSB(pDeviceQualDscr);
 397   4                        break;
 398   4                     case GD_CONFIGURATION:         // Configuration
 399   4                        SUDPTRH = MSB(pConfigDscr);
 400   4                        SUDPTRL = LSB(pConfigDscr);
 401   4                        break;
 402   4                     case GD_OTHER_SPEED_CONFIGURATION:  // Other Speed Configuration
 403   4                        SUDPTRH = MSB(pOtherConfigDscr);
 404   4                        SUDPTRL = LSB(pOtherConfigDscr);
 405   4                        break;
 406   4                     case GD_STRING:            // String
 407   4                        if(dscr_ptr = (void *)EZUSB_GetStringDscr(SETUPDAT[2]))
 408   4                        {
 409   5      
 410   5                           SUDPTRH = MSB(dscr_ptr);
 411   5                           SUDPTRL = LSB(dscr_ptr);
 412   5                        }
 413   4                        else 
 414   4                           EZUSB_STALL_EP0();   // Stall End Point 0
 415   4                        break;
 416   4                     default:            // Invalid request
 417   4                        EZUSB_STALL_EP0();      // Stall End Point 0
 418   4                  }
 419   3               break;
 420   3            case SC_GET_INTERFACE:                  // *** Get Interface
 421   3               DR_GetInterface();
 422   3               break;
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 8   

 423   3            case SC_SET_INTERFACE:                  // *** Set Interface
 424   3               DR_SetInterface();
 425   3               break;
 426   3            case SC_SET_CONFIGURATION:               // *** Set Configuration
 427   3               DR_SetConfiguration();
 428   3               break;
 429   3            case SC_GET_CONFIGURATION:               // *** Get Configuration
 430   3               DR_GetConfiguration();
 431   3               break;
 432   3            case SC_GET_STATUS:                  // *** Get Status
 433   3               if(DR_GetStatus())
 434   3                  switch(SETUPDAT[0])
 435   3                  {
 436   4                     case GS_DEVICE:            // Device
 437   4                        EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
 438   4                        EP0BUF[1] = 0;
 439   4                        EP0BCH = 0;
 440   4                        EP0BCL = 2;
 441   4                        break;
 442   4                     case GS_INTERFACE:         // Interface
 443   4                        EP0BUF[0] = 0;
 444   4                        EP0BUF[1] = 0;
 445   4                        EP0BCH = 0;
 446   4                        EP0BCL = 2;
 447   4                        break;
 448   4                     case GS_ENDPOINT:         // End Point
 449   4                        EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
 450   4                        EP0BUF[1] = 0;
 451   4                        EP0BCH = 0;
 452   4                        EP0BCL = 2;
 453   4                        break;
 454   4                     default:            // Invalid Command
 455   4                        EZUSB_STALL_EP0();      // Stall End Point 0
 456   4                  }
 457   3               break;
 458   3            case SC_CLEAR_FEATURE:                  // *** Clear Feature
 459   3               if(DR_ClearFeature())
 460   3                  switch(SETUPDAT[0])
 461   3                  {
 462   4                     case FT_DEVICE:            // Device
 463   4                        if(SETUPDAT[2] == 1)
 464   4                           Rwuen = FALSE;       // Disable Remote Wakeup
 465   4                        else
 466   4                           EZUSB_STALL_EP0();   // Stall End Point 0
 467   4                        break;
 468   4                     case FT_ENDPOINT:         // End Point
 469   4                        if(SETUPDAT[2] == 0)
 470   4                        {
 471   5                           *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL;
 472   5                           EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
 473   5                        }
 474   4                        else
 475   4                           EZUSB_STALL_EP0();   // Stall End Point 0
 476   4                        break;
 477   4                  }
 478   3               break;
 479   3            case SC_SET_FEATURE:                  // *** Set Feature
 480   3               if(DR_SetFeature())
 481   3                  switch(SETUPDAT[0])
 482   3                  {
 483   4                     case FT_DEVICE:            // Device
 484   4                        if(SETUPDAT[2] == 1)
C51 COMPILER V8.08   FW                                                                    07/25/2020 11:40:23 PAGE 9   

 485   4                           Rwuen = TRUE;      // Enable Remote Wakeup
 486   4                        else if(SETUPDAT[2] == 2)
 487   4                           // Set Feature Test Mode.  The core handles this request.  However, it is
 488   4                           // necessary for the firmware to complete the handshake phase of the
 489   4                           // control transfer before the chip will enter test mode.  It is also
 490   4                           // necessary for FX2 to be physically disconnected (D+ and D-)
 491   4                           // from the host before it will enter test mode.
 492   4                           break;
 493   4                        else
 494   4                           EZUSB_STALL_EP0();   // Stall End Point 0
 495   4                        break;
 496   4                     case FT_ENDPOINT:         // End Point
 497   4                        *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL;
 498   4                        break;
 499   4                  }
 500   3               break;
 501   3            default:                     // *** Invalid Command
 502   3               if(DR_VendorCmnd())
 503   3                  EZUSB_STALL_EP0();            // Stall End Point 0
 504   3         }
 505   2        }
 506   1         // Acknowledge handshake phase of device request
 507   1         EP0CS |= bmHSNAK;
 508   1      }
 509          
 510          // Wake-up interrupt handler
 511          void resume_isr(void) interrupt WKUP_VECT
 512          {
 513   1         EZUSB_CLEAR_RSMIRQ();
 514   1      }
 515          
 516          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1340    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
